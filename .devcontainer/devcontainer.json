{
  // Nome exibido no Codespaces/VS Code
  "name": "hacktiba-2025-labs",

  // Imagem oficial com Python 3.11 (j√° vem com pip)
  "image": "mcr.microsoft.com/devcontainers/python:3.11",

  // (Opcional) Reafirma Python 3.11 via Feature oficial
  "features": {
    "ghcr.io/devcontainers/features/python:1": {
      "version": "3.11"
    }
  },

  // Instala TODOS os requirements encontrados nos labs (lab01/, lab02/, ...)
  "postCreateCommand": "/bin/bash -lc '\
    set -e; \
    echo \"üì¶ Atualizando pip\"; \
    python -m pip install --upgrade pip; \
    echo \"üìÇ Procurando requirements em lab*/requirements.txt\"; \
    found=0; \
    for req in lab*/requirements.txt; do \
      if [ -f \"$req\" ]; then \
        found=1; \
        echo \"‚û°Ô∏è  Instalando $req\"; \
        pip install -r \"$req\" || echo \"‚ö†Ô∏è Falha ao instalar $req (prosseguindo)\"; \
      fi; \
    done; \
    if [ $found -eq 0 ]; then \
      echo \"‚ÑπÔ∏è Nenhum lab*/requirements.txt encontrado. Pulei instala√ß√µes.\"; \
    fi; \
  '",

  // Checagem leve ao iniciar: mostra vers√µes se torch/transformers estiverem presentes
  "postStartCommand": "/bin/bash -lc '\
    python - <<\"PY\" \
from importlib.util import find_spec as f; \
import sys; \
def v(m): \
  try: \
    mod=__import__(m); print(f\"‚úÖ {m}\", getattr(mod,\"__version__\",\"n/a\")); \
  except Exception as e: \
    print(f\"‚ÑπÔ∏è {m} n√£o instalado\"); \
for m in (\"torch\",\"transformers\"): v(m) \
PY \
  '",

  // Extens√µes √∫teis no editor
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-toolsai.jupyter"
      ],
      "settings": {
        "python.defaultInterpreterPath": "/usr/local/bin/python",
        "python.analysis.typeCheckingMode": "basic",
        "terminal.integrated.defaultProfile.linux": "bash"
      }
    }
  },

  // Qualquer vari√°vel extra √∫til
  "containerEnv": {
    "PIP_DISABLE_PIP_VERSION_CHECK": "1",
    "PYTHONUNBUFFERED": "1"
  }
}
